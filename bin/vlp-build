#!/bin/bash

DIR=`dirname $0`
VLPDIR="$(cd $DIR; cd ..; pwd)"
VLPHOME="$HOME/.vpn-launchpad"
UBUNTUVER=bionic

aws --output table iam get-user >/dev/null
if [ "$?" != "0" ]; then
	echo "Please run 'vlp --init' first."
	exit
fi

VPSIP=`$VLPDIR/bin/vlp-status 2>/dev/null|grep VPN-SERVER|awk '{print $2}'`
if [ "$VPSIP" != "None" ]; then
	echo "Found VPN-SERVER: $VPSIP"
	echo "Please purge it before building"
	echo "Abort."
	exit
fi

PROFILE="default"
INSTYPE="t2.micro"
STACKID="vlp-$UBUNTUVER"
REGION=`aws configure get region`
AMIID=`aws ec2 describe-images --filters Name=name,Values=ubuntu/images/hvm-ssd/* --query 'Images[*].[ImageId,CreationDate,Name]' --output text|sort -k2 -r|grep $UBUNTUVER|head -n1|awk '{print $1}'`

SSPORT=`grep "SSPORT=" $VLPDIR/server-ssslibev/ssslibev.env |cut -d'=' -f2|sed 's/\"//g'`

if [ ! -z $1 ]; then
	STACKID="$1";
fi

echo "Creating Security Group of $STACKID..."
SGID=`aws --profile $PROFILE --region $REGION --output text ec2 create-security-group --group-name $STACKID-sg --description "Security group for $STACKID. Created by vpn-launchpad."`


echo "Creating Firewall rules of $STACKID..."
# SSH
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
# SoftEther
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 500 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 4500 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 1701 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 1194 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
# ssslibev
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port $SSPORT --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port $SSPORT --cidr 0.0.0.0/0


echo "Creating Key-Pair of $STACKID..."
if [ ! -d "$VLPHOME" ]; then
	mkdir $VLPHOME
fi
aws --profile $PROFILE --region $REGION ec2 create-key-pair --key-name $STACKID-key --query 'KeyMaterial' --output text > $VLPHOME/$STACKID-key.pem
chmod 600 $VLPHOME/$STACKID-key.pem


echo "Creating instance of $STACKID..."
INSTID=`aws --profile $PROFILE --region $REGION --output text ec2 run-instances --image-id $AMIID --security-group-ids $SGID --count 1 --instance-type $INSTYPE --key-name $STACKID-key --query 'Instances[0].InstanceId'`
echo $INSTID


echo "Waiting for the instance creation of $STACKID..."
while true; do
  sleep 10
  IPPUB=`aws --profile $PROFILE --region $REGION ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
  if [ "$IPPUB" != "" ]; then
    break;
  fi
done


echo "Taging instance of $STACKID..."
aws --profile $PROFILE --region $REGION ec2 create-tags --resources $INSTID --tags "Key=Name,Value=$STACKID"
aws --profile $PROFILE --region $REGION ec2 create-tags --resources $INSTID --tags "Key=Services,Value=softether\,ssslibev"


IPPUB=`aws --profile $PROFILE --region $REGION --output text ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
echo $IPPUB


echo "Waiting for SSH up..."
sleep 60
while true; do
  nc -zv $IPPUB 22
  if [ "$?" -eq "0" ]; then
    break;
  fi
  sleep 5
done

echo "Instance provisioning..."
mkdir ~/.ssh
ssh-keyscan -H $IPPUB >> ~/.ssh/known_hosts
echo "ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB 'sudo apt-get -y update; sudo apt-get install -y docker.io git'"
ls -l $VLPHOME
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB 'sudo apt-get -y update; sudo apt-get install -y docker.io git'
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo sh -c \"echo '\n\nnet.core.default_qdisc=fq'>>/etc/sysctl.conf\""
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo sh -c \"echo '\nnet.ipv4.tcp_congestion_control=bbr'>>/etc/sysctl.conf\""
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo sysctl -p"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo usermod -aG docker ubuntu"

echo
echo "L2TP provisioning..."
scp -i $VLPHOME/$STACKID-key.pem -r $VLPDIR/server-softether ubuntu@$IPPUB:
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "cd server-softether; sh softether.sh"
echo "Update Instance Tags..."
while read p; do
  KEY=`echo "$p"|cut -d'=' -f1`
  VAL=`echo "$p"|cut -d'=' -f2`
  aws --profile $PROFILE --region $REGION ec2 create-tags --resources $INSTID --tags "Key=softether.$KEY,Value=$VAL"
done <$VLPDIR/server-softether/softether.env
echo "Done."

echo
echo "ssslibev provisioning..."
scp -i $VLPHOME/$STACKID-key.pem -r $VLPDIR/server-ssslibev ubuntu@$IPPUB:
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "cd server-ssslibev; sh ssslibev.sh"
echo "Update Instance Tags..."
while read p; do
  KEY=`echo "$p"|cut -d'=' -f1`
  VAL=`echo "$p"|cut -d'=' -f2`
  aws --profile $PROFILE --region $REGION ec2 create-tags --resources $INSTID --tags "Key=ssslibev.$KEY,Value=$VAL"
done <$VLPDIR/server-ssslibev/ssslibev.env
echo "Done."

echo
echo "New VPN-SERVER is up on $IPPUB"
echo "Enjoy."
