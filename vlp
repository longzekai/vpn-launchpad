#!/bin/bash

DIR=`dirname $0`
VLPHOME="$(cd $DIR; pwd)"
. $VLPHOME/vlp.env
VLPCFG="$VLPHOME/.vpn-launchpad"
VLPKEY="$VLPCFG/$STACKID-key.pem"
VLPDKDIR="$VLPHOME/vpnlaunchpad"

ARCH=`arch`
DKUID=`id -u`
DKGID=`id -g`
IMGNAME="samuelhbne/vpnlaunchpad"
IMGVER="$ARCH.$DKUID.$DKGID"
IMGTAG="$IMGNAME:$IMGVER"

BIMG=`docker images |grep $IMGNAME|grep -c $IMGVER`
TDKFILE=`date +%Y%m%d%H%M%S -r $VLPDKDIR/Dockerfile.in`
TIMG=`docker inspect -f '{{ .Created }}' $IMGTAG`
TIMG=`date --date "$TIMG" +%Y%m%d%H%M%S`

if [ "$BIMG" = "0" ]; then
	echo "Image $IMGNAME not found."
	BUILD=1
fi

if [ "$TDKFILE" -gt "$TIMG" ]; then
	echo "Updated upstream detected: $VLPDKDIR/Dockerfile.in"
	BUILD=1
fi

if [ "$BUILD" = "1" ]; then
	cp -a $VLPDKDIR/Dockerfile.in $VLPDKDIR/Dockerfile
	case $ARCH in
		armv6l|armv7l)
			sed -i.bak  's/^FROM .*/FROM arm32v6\/alpine/g' $VLPDKDIR/Dockerfile
			rm -rf $VLPDKDIR/Dockerfile.bak
			;;
		x86_64|i686|i386)
			sed -i.bak  's/^FROM .*/FROM alpine/g' $VLPDKDIR/Dockerfile
			rm -rf $VLPDKDIR/Dockerfile.bak
			;;
		*)
			echo "Unsupported arch"
			exit
			;;
	esac
	sed -i.bak "s/^ENV DKUID .*/ENV DKUID ${DKUID}/" $VLPDKDIR/Dockerfile && rm -rf $VLPDKDIR/Dockerfile.bak
	sed -i.bak "s/^ENV DKGID .*/ENV DKGID ${DKGID}/" $VLPDKDIR/Dockerfile && rm -rf $VLPDKDIR/Dockerfile.bak
	echo "Building vpnlaunchpad image..."
	docker build --rm=true -t $IMGTAG $VLPDKDIR/
	echo
fi

mkdir -p $VLPHOME/.vpn-launchpad $VLPHOME/.aws
BPROFILE=`grep -c "\[profile $PROFILE\]" $VLPHOME/.aws/config 2>/dev/null`
if [ "$BPROFILE" = "0" ]; then
        echo -e "[profile $PROFILE]\nregion = ap-northeast-1\noutput = json">>$VLPHOME/.aws/config
fi

DOCKERCMD="docker run --user $DKUID:$DKGID --rm=true -v $VLPHOME:/home/vlp -it $IMGTAG"

if [[ $# = 0 ]]; then
	$DOCKERCMD /home/vlp/bin/vlp-menu
else
	subcmd="$1"
	case $subcmd in
		init)
			shift
			$DOCKERCMD /usr/bin/aws --profile $PROFILE configure
			$DOCKERCMD /home/vlp/bin/vlp-random "$@"
			;;
		build)
			shift
			$DOCKERCMD /home/vlp/bin/vlp-random "$@"
			$DOCKERCMD /home/vlp/bin/vlp-build "$@"
			$DOCKERCMD /home/vlp/bin/vlp-status --all
			;;
		status)
			shift
			$DOCKERCMD /home/vlp/bin/vlp-status "$@"
			;;
		purge)
			shift
			$DOCKERCMD /home/vlp/bin/vlp-purge "$@"
			;;
		random)
			shift
			$DOCKERCMD /home/vlp/bin/vlp-random "$@"
			;;
		ssh)
			shift
			if [ -f $VLPKEY ]; then
				$DOCKERCMD /home/vlp/bin/vlp-ssh "$@"
			else
				echo "$VLPKEY not found. Not created from this box?"
				echo "Abort."
				exit
			fi
			;;
		*)
			shift
			$DOCKERCMD /home/vlp/bin/vlp-menu "$@"
			;;
	esac
fi
