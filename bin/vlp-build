#!/bin/bash

DIR=`dirname $0`
VLPHOME="$(cd $DIR; cd ..; pwd)"
. $VLPHOME/vlp.env
VLPCFG="$HOME/.vpn-launchpad"
VLPKEY="$VLPCFG/$STACKID-key.pem"
REGION=`aws --profile $PROFILE configure get region`
aws --profile $PROFILE --output table iam get-user >/dev/null
if [ "$?" != "0" ]; then
	echo "Please run 'vlp init' first."
	exit 255
fi

echo "Checking existing VPN server instance..."
VPSIP=`$VLPHOME/bin/vlp-status 2>/dev/null|grep VPN-SERVER|awk '{print $2}'`
if [ "$VPSIP" != "None" ]; then
	echo "Found VPN-SERVER: $VPSIP"
	echo "Please purge it before building"
	echo "Abort."
	echo
	exit 254
fi
echo "VPN-SERVER: None"
echo "Done."
echo

echo "Querying $UBUNTUVER image AMIID in $REGION ..."
AMIID=`aws --profile $PROFILE --output text ec2 describe-images --filters Name=name,Values=ubuntu/images/hvm-ssd/* --query 'Images[*].[ImageId,CreationDate,Name]'|sort -k2 -r|grep $UBUNTUVER|head -n1|awk '{print $1}'`
if [ "$AMIID" = "" ]; then
	echo "$UBUNTUVER image not found."
	echo "Abort."
	exit 253
fi
echo "Latest $UBUNTUVER image AMIID in $REGION: $AMIID"
echo "Done."
echo

echo "Creating Security Group of $STACKID..."
SGID=`aws --profile $PROFILE --output text ec2 create-security-group --group-name $STACKID-sg --description "Security group for $STACKID. Created by vpn-launchpad."`
echo "Done."
echo

echo "Creating Firewall rules of $STACKID..."
# SSH
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
# SoftEther
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 500 --cidr 0.0.0.0/0
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 4500 --cidr 0.0.0.0/0
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 1701 --cidr 0.0.0.0/0
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 1194 --cidr 0.0.0.0/0
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
# ssslibev
SSPORT=`grep "SSPORT=" $VLPHOME/server-ssslibev/ssslibev.env |cut -d'=' -f2|sed 's/\"//g'`
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port $SSPORT --cidr 0.0.0.0/0
aws --profile $PROFILE --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port $SSPORT --cidr 0.0.0.0/0
echo "Done."
echo

echo "Creating Key-Pair of $STACKID..."
if [ ! -d "$VLPCFG" ]; then
	mkdir $VLPCFG
fi
aws --profile $PROFILE --output text ec2 create-key-pair --key-name $STACKID-key --query 'KeyMaterial'> $VLPKEY
chmod 600 $VLPKEY
echo "Done."
echo

echo "Creating instance of $STACKID..."
INSTID=`aws --profile $PROFILE --output text ec2 run-instances --image-id $AMIID --security-group-ids $SGID --count 1 --instance-type $INSTYPE --key-name $STACKID-key --query 'Instances[0].InstanceId'`
if [ "$INSTID" = "" ]; then
        echo "Instance building failed. Please purge the incomplete building first before redo building."
	echo "Abort."
	echo
        exit 252
fi
echo "Done."
echo

echo "Waiting for the instance up of $STACKID..."
while true; do
  sleep 10
  IPPUB=`aws --profile $PROFILE ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
  if [ "$IPPUB" != "" ]; then
    break;
  fi
done
echo "Done."
echo

echo "Taging instance of $STACKID..."
aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags "Key=Name,Value=$STACKID"
aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags "Key=Services,Value=softether\,ssslibev"
echo "Done."
echo

echo "Querying instance IP address..."
IPPUB=`aws --profile $PROFILE --output text ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
echo "Done."
echo

echo "Waiting for SSH up on $IPPUB ..."
sleep 60
while true; do
  nc -zv $IPPUB 22
  if [ "$?" -eq "0" ]; then
    break;
  fi
  sleep 5
done
echo "Done."
echo

echo "Instance provisioning..."
mkdir -p ~/.ssh
ssh-keyscan -H $IPPUB >> ~/.ssh/known_hosts
ssh -i $VLPKEY ubuntu@$IPPUB "echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections"
ssh -i $VLPKEY ubuntu@$IPPUB "sudo apt-get -y update; sudo apt-get install -y docker.io git"
ssh -i $VLPKEY ubuntu@$IPPUB "sudo sh -c \"echo '\n\nnet.core.default_qdisc=fq'>>/etc/sysctl.conf\""
ssh -i $VLPKEY ubuntu@$IPPUB "sudo sh -c \"echo '\nnet.ipv4.tcp_congestion_control=bbr'>>/etc/sysctl.conf\""
ssh -i $VLPKEY ubuntu@$IPPUB "sudo sysctl -p"
ssh -i $VLPKEY ubuntu@$IPPUB "sudo usermod -aG docker ubuntu"
echo "Done."
echo

echo "L2TP provisioning..."
scp -i $VLPKEY -r $VLPHOME/server-softether ubuntu@$IPPUB:
ssh -i $VLPKEY ubuntu@$IPPUB "cd server-softether; sh softether.sh"
echo "Update Instance Tags..."
while read p; do
  KEY=`echo "$p"|cut -d'=' -f1`
  VAL=`echo "$p"|cut -d'=' -f2`
  if [ "$KEY" = "" ]; then
          continue
  fi
  aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags "Key=softether.$KEY,Value=$VAL"
done <$VLPHOME/server-softether/softether.env
echo "Done."
echo

echo "ssslibev provisioning..."
scp -i $VLPKEY -r $VLPHOME/server-ssslibev ubuntu@$IPPUB:
ssh -i $VLPKEY ubuntu@$IPPUB "cd server-ssslibev; sh ssslibev.sh"
echo "Update Instance Tags..."
while read p; do
  KEY=`echo "$p"|cut -d'=' -f1`
  VAL=`echo "$p"|cut -d'=' -f2`
  if [ "$KEY" = "" ]; then
          continue
  fi
  aws --profile $PROFILE ec2 create-tags --resources $INSTID --tags "Key=ssslibev.$KEY,Value=$VAL"
done <$VLPHOME/server-ssslibev/ssslibev.env
echo "Done."
echo
exit 0
