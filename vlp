#!/bin/bash

DIR=`dirname $0`
VLPDIR="$(cd $DIR; pwd)"
. $VLPDIR/vlp.env
VLPHOME="$VLPDIR/.vpn-launchpad"
VLPKEY="$VLPHOME/$STACKID-key.pem"

ARCH=`arch`
DKUID=`id -u`
DKGID=`id -g`
IMGNAME="samuelhbne/vpnlaunchpad"
IMGVER="$ARCH.$DKUID.$DKGID"
IMGTAG="$IMGNAME:$IMGVER"

BIMG=`docker images |grep $IMGNAME|grep -c $IMGVER`
TDKFILE=`date +%Y%m%d%H%M%S -r $VLPDIR/vpnlaunchpad/Dockerfile.in`
TIMG=`docker inspect -f '{{ .Created }}' $IMGTAG`
TIMG=`date --date "$TIMG" +%Y%m%d%H%M%S`

if [ "$BIMG" = "0" ] || [ "$TDKFILE" -gt "$TIMG" ]; then
	cp -a $VLPDIR/vpnlaunchpad/Dockerfile.in $VLPDIR/vpnlaunchpad/Dockerfile
	case $ARCH in
		armv6l|armv7l)
			sed -i.bak  's/^FROM .*/FROM arm32v6\/alpine/g' $VLPDIR/vpnlaunchpad/Dockerfile
			rm -rf $VLPDIR/vpnlaunchpad/Dockerfile.bak
			;;
		x86_64|i686|i386)
			sed -i.bak  's/^FROM .*/FROM alpine/g' $VLPDIR/vpnlaunchpad/Dockerfile
			rm -rf $VLPDIR/vpnlaunchpad/Dockerfile.bak
			;;
		*)
			echo "Unsupported arch"
			exit
			;;
	esac
	sed -i.bak "s/^ENV DKUID .*/ENV DKUID ${DKUID}/" $VLPDIR/vpnlaunchpad/Dockerfile && rm -rf $VLPDIR/vpnlaunchpad/Dockerfile.bak
	sed -i.bak "s/^ENV DKGID .*/ENV DKGID ${DKGID}/" $VLPDIR/vpnlaunchpad/Dockerfile && rm -rf $VLPDIR/vpnlaunchpad/Dockerfile.bak
	echo "Building vpnlaunchpad image..."
	docker build --rm=true -t $IMGTAG $VLPDIR/vpnlaunchpad/
	echo
fi

mkdir -p $VLPDIR/.vpn-launchpad $VLPDIR/.aws
BPROFILE=`grep -c "\[profile $PROFILE\]" $VLPDIR/.aws/config 2>/dev/null`
if [ "$BPROFILE" = "0" ]; then
        echo -e "[profile $PROFILE]\nregion = ap-northeast-1\noutput = json">>$VLPDIR/.aws/config
fi

DOCKERCMD="docker run --user $DKUID:$DKGID --rm=true -v $VLPDIR:/home/vlp -it $IMGTAG"

if [[ $# = 0 ]]; then
	$DOCKERCMD /home/vlp/bin/vlp-menu
else
#	while [[ $# > 0 ]]; do
		act="$1"
		case $act in
			init)
				shift
				$DOCKERCMD /usr/bin/aws --profile $PROFILE configure
				$DOCKERCMD /home/vlp/bin/vlp-random "$@"
				#shift
				;;
			build)
				shift
				$DOCKERCMD /home/vlp/bin/vlp-random "$@"
				$DOCKERCMD /home/vlp/bin/vlp-build "$@"
				$DOCKERCMD /home/vlp/bin/vlp-status "$@"
				shift
				;;
			status)
				shift
				$DOCKERCMD /home/vlp/bin/vlp-status "$@"
				#shift
				;;
			purge)
				shift
				$DOCKERCMD /home/vlp/bin/vlp-purge "$@"
				#shift
				;;
			random)
				shift
				$DOCKERCMD /home/vlp/bin/vlp-random "$@"
				#shift
				;;
			ssh)
				shift
				if [ -f $VLPKEY ]; then
					$DOCKERCMD /home/vlp/bin/vlp-ssh "$@"
				else
					echo "$VLPKEY not found. Not created from this box?"
					echo "Abort."
					exit
				fi
				#shift
				;;
			*)
				$DOCKERCMD /home/vlp/bin/vlp-menu "$@"
				#shift
				;;
		esac
#	done
fi
